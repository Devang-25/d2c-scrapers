#include <bits/stdc++.h>
#define MAXN 100003
using namespace std;

long long  N, W, L;

struct trees{
   long long hi, ri;
   long long  minMonths;
}s[MAXN];

struct treeSum {
   long long hSum, rSum;
}tSum[MAXN];


long long getMinMonths(long long hi, long long ri) {
   if ( (L - hi) % ri == 0  ) {
      return (L - hi) / ri;
   }
   
   return 1 + (L - hi) / ri;
}

bool cmp (const struct trees s1, const struct trees s2) {
   return (s1.minMonths <  s2.minMonths) ;
}


void getResult(long long l, long long r, long long ht, long long rate) {
   while ( l <= r ) {
      long long  mid = l + (r-l)/2;
      
      if (mid == l) {
         cout<<l<<endl;
         return ;
      }
      
      if (mid == r) {
         cout<<r<<endl;
         return ;
      }
      
      if (ht + (mid*rate) == W) {
         cout<<mid<<endl;
         return ;
      } else if ( ht+(mid * rate) >= W && ht+((mid-1) * rate) < W ) {
         cout<<mid<<endl;
         return ;
      } else if ( 
                     (ht +(mid * rate) ) < W 
                      && 
                     (ht + ((mid+1) * rate)) >= W  
                     
                     ) {
         cout<<mid+1<<endl;
         return ;
      } else if ( (ht + (mid*rate)) > W   ) {
         r = mid-1;
      } else if ( (ht + (mid * rate) )  < W) {
         l = mid+1;
      }
      
   }
   
}


void solve () {
   
   if (  s[0].minMonths >= ( W - tSum[0].hSum) / (tSum[0].rSum) ) {
      cout<<s[0].minMonths<<endl;
      return ;
   }
   
   for (int i = 0; i < N - 1 ; i++) {
      if (s[i].minMonths != s[i+1].minMonths) {
         
         long long initHeight =  tSum[i].hSum;
         long long rate = tSum[i].rSum;
         long long months  = s[i].minMonths;
         
         if ( ( (rate * months) ) >= W - initHeight) {
            
            if (s[i].minMonths == s[0].minMonths ) {
               cout<<s[i].minMonths<<endl;
               return ;
            } 
            
            
            int j = i-1;
            
            long long HI_MON = months;
            long long LOW_MON;
            
            long long PREV_RATE;
            long long PREV_HGHT;
            
            for ( ; j >= 0 ; j--) {
               if (months != s[j].minMonths) {
                  PREV_HGHT = tSum[j].hSum;
                  PREV_RATE = tSum[j].rSum;
                  
                  LOW_MON   = s[j].minMonths;
                  break;
               }
            }
           
            //getResult(LOW_MON, HI_MON, PREV_HGHT, PREV_RATE);
               
            for (long long k = LOW_MON+1 ; k <= HI_MON-1; k++) {
                if ( PREV_RATE*  k  < 0 ) {
                    return ;
                }
                
                if ( PREV_RATE*  k >= (W - PREV_HGHT) ) {
                    cout<<k<<endl;
                    return;
                }
            }
            
            cout<<HI_MON<<endl;
            return ;
         }
         
      }
   }
   
   long long ht = tSum[N-1].hSum;
   long long rate = tSum[N-1].rSum;
   long long M = s[N-1].minMonths;
   
   if ( (M * rate)  >= W - ht) {
      long long LOW_MON;
      long long PREV_RATE;
      long long PREV_HGHT;
            
      for (int j = N-1; j >= 0 ; j--) {
            if (s[j].minMonths != M) {
               LOW_MON = s[j].minMonths;
               PREV_HGHT = tSum[j].hSum;
               PREV_RATE = tSum[j].rSum;
               break;
            }
      }
      
        //getResult(LOW_MON, M, PREV_HGHT, PREV_RATE);
         for (long long k = LOW_MON + 1; k <= M-1; k++) {
             if (PREV_RATE * k < 0 ) {
                 cout<<k<<endl;
                 return ;
             }
            if (   PREV_RATE * k >= ( W - PREV_HGHT ) ) {
                cout<<k<<endl;
                return;
            }
         }
         
         cout<<M<<endl;
         return ;
         
   } else {
      
      for (long long k = M ; ; k++) {
         if (rate * k < 0 ) {
             cout<<k<<endl;
             return ;
         }
         if ( rate * k >= (W - ht )) {
            cout<<k<<endl;
            return;
         }
      }
      
   }
   return ;
}

int main() {
   scanf("%lld %lld %lld ", &N, &W, &L);
   
   for(int i = 0; i < N; i++) {
      long long hi, ri;
      scanf("%lld %lld", &hi, &ri);
      s[i].hi = hi;
      s[i].ri = ri;
      
      if ( L - hi <= 0 ) {
         s[i].minMonths = 0;
         continue;
      }
      long long minMonths = getMinMonths(hi, ri);
      s[i].minMonths = minMonths;
      
      
   }
   
   sort(s, s+N, cmp);

   for (int i = 0 ; i < N; i++) {
      tSum[i].hSum = s[i].hi;
      tSum[i].rSum = s[i].ri;
   }
   
   for (int i = 1; i < N;i++) {
      tSum[i].hSum += tSum[i-1].hSum;
      tSum[i].rSum += tSum[i-1].rSum;
   }
   
   
   solve();
   
}