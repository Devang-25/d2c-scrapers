#include<bits/stdc++.h>

using namespace std;
long long int x2[100000];
void swap(long long int* a, long long int* b)
{
    long long int t = *a;
    *a = *b;
    *b = t;
}
 
/* This function takes last element as pivot, places the pivot element at its
   correct position in sorted array, and places all smaller (smaller than pivot)
   to left of pivot and all greater elements to right of pivot */
long long int partition (long long int arr[],long long int l,long long int h)
{
    long long int x = arr[h];    // pivot
    long long int i = (l - 1);  // Index of smaller element
 
    for (long long int j = l; j <= h- 1; j++)
    {
        // If current element is smaller than or equal to pivot 
        if (arr[j] <= x)
        {
            i++;    // increment index of smaller element
            swap(&arr[i], &arr[j]);
	    swap(&x2[i],&x2[j]);  // Swap current element with index
        }
    }
    swap(&arr[i + 1], &arr[h]);
    swap(&x2[i+1],&x2[h]);  
    return (i + 1);
}
 
/* arr[] --> Array to be sorted, l  --> Starting index, h  --> Ending index */
void quickSort(long long int arr[],long long int l,long long int h)
{
    if (l < h)
    {
        long long int p = partition(arr, l, h); /* Partitioning index */
        quickSort(arr, l, p - 1);
        quickSort(arr, p + 1, h);
    }
}



int main(){
long long int m, m1[100000],x1[100000],j,x,y,t,n,i,index;

cin>>t;

while(t--){


cin>>n;

for(i=0;i<n;i++){
x2[i]=i;
cin>>m;
m1[i]=-1000000001;
for(j=0;j<m;j++){
cin>>x>>y;
if(x>m1[i])
{	m1[i]=x;
	
}


}
}





quickSort(m1,0,n-1);


for(i=0;i<n;i++)
x1[x2[i]]=i;

for(i=0;i<n;i++)
cout<<x1[i]<<" ";

cout<<"
";




}



return 0;

}
