#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
const int mod = 1e9 + 7;
int n;
int a[N];
long long prefixpower[N];
inline long long mul(long long x , long long y, long long md){
    return ( x * y) % md;
}
inline long long add(long long x , long long y, long long md){
    long long ret = x;
    ret += y;
    if(ret >= md) ret -= md;
    return ret;
}
inline void powerPreCompute(){
    prefixpower[0] = 1LL;
    long long cur = 1LL;
    for(int i = 1; i < N; ++i){
        cur = mul(cur , 2LL , mod);
        prefixpower[i] = add(prefixpower[i - 1] , cur , mod);
    }
}
inline long long lefthandSide(){
    long long ret = a[1];
    long long cur = 2LL;
    for(int i = 2; i < n; ++i){
        cur = mul(cur , 2LL , mod);
        ret = add(ret , mul(cur - 1 , a[i] , mod) , mod);
    }
    return ret;
}
inline long long righthandSide(){
    long long ret = 0LL;
    for(int i = 0; i <= n - 2; ++i){
        ret = add(ret , mul(prefixpower[n - 2 - i] , a[i] , mod) , mod);
    }
    return ret;
}
#define gc() getchar_unlocked()

inline void scan(int & u){
    u = 0;
    char c = gc();
    while(c < '0' || c > '9') c = gc();
    while(c >= '0' && c <= '9'){
        u = u * 10 + (c - '0');
        c = gc();
    }
}

#define pc(x) putchar_unlocked(x)

inline void out(long long int & ans){
    char s[18];
    int idx = 0;
    do{
        s[idx++] = (char)(ans % 10 + '0');
        ans /= 10;
    }while(ans);
    --idx;
    while(idx >= 0) pc(s[idx--]);
    pc('
');
}
int main(){
    int tt;
    powerPreCompute();
    scan(tt);
    while(tt--){
        scan(n);
        for(int i = 0; i < n; ++i) scan(a[i]);
        sort(a, a + n);
        long long ans1 = lefthandSide();
        long long ans2 = righthandSide();
        long long ans = (ans1 - ans2 + mod)%mod;
        out(ans);
    }
    return 0;
}
