import heapq

def solve(s,k):
    res, heap, tmp, list_s = [],[],[],[]
    n = len(s)
    pos = 0
    for i,c in enumerate(s):
        list_s.append((c,i))
    while k > 0:
        heap = list_s[pos : n - k + 1]
        heapq.heapify(heap)
        mins = heapq.heappop(heap)
        res.append(mins[0])
        tmp.append(mins[1])
        pos = tmp[-1] + 1
        if k > 1:
            heapq.heappush(heap, list_s[n - k + 1])
        k -= 1
    return "".join(res)
    
def astring():
    T = int(raw_input())
    for t in range(T):
        s = raw_input()
        k = int(raw_input())
        print solve(s,k)

if __name__ == "__main__":
  astring()
