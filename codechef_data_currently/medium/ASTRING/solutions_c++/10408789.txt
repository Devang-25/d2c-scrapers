#include <cstdio>
#include <iostream>
#include <vector>
#include <algorithm>
#include <bitset>
#include <functional>
#include <iterator>
#include <map>
#include <numeric>
#include <cstring>
#include <string>
#include <sstream>
#include <set>
#include <stack>
#include <queue>
#include <cctype>
#include <math.h>
#include <cstdlib>

using namespace std;

#define I64 long long int
#define INF 0x7f7f7f7f
#define SIZE 1000
#define MAX 2000
#define EPS 1e-9
#define PI 2*acos(0.0)

#define PII pair <int, int>
#define PLL pair <I64, I64>
#define PDD pair <double, double>
#define PSI pair <string, int>
#define PIS pair <int, string>
#define PSS pair <string string>

#define MII map <int, int>
#define MLL map <I64, I64>
#define MDD map <double, double>
#define MSI map <string, int>
#define MIS map <int, string>
#define MSS map <string string>

#define VI vector <int>
#define VS vector <string>
#define QI queue <int>
#define QS queue <string>
#define SI stack <int>
#define SS stack <string>

#define pb push_back
#define pob pop_back
#define mp make_pair

#define IT iterator
#define ff first
#define ss second

#define SET(a, b) memset( a, b, sizeof (a) )
#define READ(f) freopen(f, "r", stdin)
#define WRITE(f) freopen(f, "w", stdout)

#define IAMHERE cout << "YES
";
#define DEBUG(a, b) cout << a << ": " << b << "
";

string dp[110][110], s;
//bool visited[110][110];

string func(int len, int k)
{
	if (len == 0 || k > len || k == 0) return "";
	if (dp[len][k] != "") return dp[len][k];

	string s1 = func(len-1, k);
	string s2 = func(len-1, k-1) + s[len-1];

	if (s1 != "" && s2 != "") dp[len][k] = min(s1, s2);
	else if (s1 == "") dp[len][k] = s2;
	else if (s2 == "") dp[len][k] = s1;

	return dp[len][k];
}

int main()
{
    //READ("in.txt");
    //WRITE("out.txt");
    int Case=1;
    int k;
    char dump[2];

    int tc; scanf("%d", &tc);
    gets(dump);

    while (tc--) {
    	getline(cin, s);
    	scanf("%d
", &k);

    	int len = s.size();

    	for (int i = 0; i < 101; i++) {
    		for (int j = 0; j < 101; j++) {
    			dp[i][j] = "";
    		}
    	}
    	printf("%s
", func(len, k).c_str());
    }
    return 0;
}
