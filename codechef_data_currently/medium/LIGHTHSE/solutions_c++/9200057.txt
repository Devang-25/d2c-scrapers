#include<stdio.h>
#include<cstdlib>
using namespace std;
struct point
{
	long int x, y,num;
};
int compare(const void *a, const void *b)
{
	if ((*(point*)a).x > (*(point*)b).x)
		return 1;
	if ((*(point*)a).x == (*(point*)b).x)
		return 0;
	if ((*(point*)a).x < (*(point*)b).x)
		return -1;
}
long int min(point points[], long int n)
{
	long int min1 = points[0].y;
	for (int i = 0; i < n; ++i)
	{
		if (points[i].y < min1)
			min1 = points[i].y;
	}
	return min1;
}
long int max(point points[], long int n)
{
	long int max1 = points[0].y;
	for (int i = 0; i < n; ++i)
	{
		if (points[i].y > max1)
			max1 = points[i].y;
	}
	return max1;
}
int main()
{
	long int t, n;
	point points[100000];
	scanf("%ld", &t);
	while (t--)
	{
		scanf("%ld", &n);
		for (long int i = 0; i < n; ++i)
		{
			scanf("%ld %ld", &points[i].x, &points[i].y);
			points[i].num = i + 1;
		}
		qsort(points, n, sizeof(point), compare);
		if (points[0].y == min(points, n))
			printf("1
%ld NE
", points[0].num);
		else if (points[0].y == max(points, n))
			printf("1
%ld SE
", points[0].num);
		else if (points[n - 1].y == min(points, n))
			printf("1
%ld NW
", points[n-1].num);
		else if (points[n - 1].y == max(points, n))
			printf("1
%ld SW
", points[n - 1].num);
		else
		{
			if (points[0].y > points[n - 1].y)
			{
				printf("2
%ld SE
%ld NW
", points[0].num, points[n - 1].num);
			}
			else
			{
				printf("2
%ld NE
%ld SW
", points[0].num, points[n - 1].num);
			}
		}
	}
	return 0;
}