///Author : Sharath Chandran
//Handle : sharad07
 
#include<bits/stdc++.h>
#define lld long long int
#define llu unsigned long long int
#define pb(x) push_back(x)
#define sz size()
#define inp1(x) scanf("%d",&x)
#define inp2(x,y) scanf("%d%d",&x,&y)
#define inp3(x,y,z) scanf("%d%d%d",&x,&y,&z)
#define print(x) printf("%d",x)
#define println(x) printf("%d
",x)
#define _for(i,x,y) for(int i=x;i<y;i++)
#define pii pair<int,int> pii
#define mp(x,y) make_pair(x,y)
using namespace std;
const int maxx=2e5+3;
struct exch
{
    int day,A,B;
};
 
//I/O beg 
int scan_d()    {int ip=getchar_unlocked(),ret=0,flag=1;for(;ip<'0'||ip>'9';ip=getchar_unlocked())if(ip=='-'){flag=-1;ip=getchar_unlocked();break;}for(;ip>='0'&&ip<='9';ip=getchar_unlocked())ret=ret*10+ip-'0';return flag*ret;}
inline void println_llu(llu n)   {int i=21;char output_buffer[22];output_buffer[21]='
';do{output_buffer[--i]=(n%10)+'0';n/=10;}while(n);do{putchar_unlocked(output_buffer[i]);}while(++i<22);}
//I/O end

int A[maxx],C[maxx],ans[maxx];
int P[maxx],M,N,Rank[maxx];
bool done[maxx];
vector<exch> E;
 
inline bool cmp(const exch &a,const exch &b)
{
    if(a.day==b.day) return (a.B>b.B);
    return a.day>b.day;
}
 
inline void create_set(int x)
{
    P[x]=x; 
    done[x]=Rank[x]=C[x]=0; 
}
 
inline int find_parent(int x)
{
    if(x!=P[x]) P[x]=find_parent(P[x]);
    return P[x];
}
 
inline void DSU(int x,int y)
{
    int Px,Py;
    Px=find_parent(x);
    Py=find_parent(y);  
    if(Rank[Px]>Rank[Py]) 
    {
        P[Py]=Px;
    }
    else
    {
        P[Px]=Py;
    } 
    if(Rank[Px]==Rank[Py]) Rank[Py]++;
    //cout<<x<<" "<<Px<<".."<<y<<" "<<Py<<"--"<<P[4]<<endl;
}
 
inline void process(int l,int r) //for each day create connected components
{
    memset(P,0,sizeof(P));
    _for(i,l,r+1)
    {
        if(!P[E[i].A]) create_set(E[i].A);
        if(!P[E[i].B]) create_set(E[i].B);
        DSU(E[i].A,E[i].B);
    }
    
    _for(i,l,r+1)
    {
        if(!done[E[i].A]||!done[E[i].B]) 
        {
            P[E[i].A]=find_parent(E[i].A);
            done[E[i].A]=1;
            P[E[i].B]=P[E[i].A];
            done[E[i].B]=1;
        }
    }
    
    int val,index;
    _for(i,l,r+1)
    {
        index=P[E[i].A];
        val=max(ans[index],ans[E[i].A]);
        C[index]=max(C[index],val);
        index=P[E[i].B];
        val=max(ans[index],ans[E[i].B]);
        C[index]=max(C[index],val);
    }
    
    _for(i,l,r+1)
    {
        index=P[E[i].A];
        ans[E[i].A]=max(ans[E[i].A],C[index]);
        index=P[E[i].B];
        ans[E[i].B]=max(ans[E[i].B],C[index]);
    }
    //_for(i,1,11) cout<<ans[i]<<" "; cout<<endl;
}
 
int main()
{
    int t,l,r;
    exch tmp;
    t=scan_d();
    while(t--)
    {
        N=scan_d();
        M=scan_d();
        _for(i,0,N) 
        {
            A[i]=scan_d();
            ans[A[i]]=A[i];
        }
        _for(i,0,M) 
        {
            tmp.day=scan_d();
            tmp.A=scan_d();
            tmp.B=scan_d();
            ans[tmp.A]=tmp.A;
            ans[tmp.B]=tmp.B;
            E.pb(tmp);
        }
        tmp.day=tmp.A=tmp.B=0;
        E.pb(tmp);
        sort(E.begin(),E.end(),cmp);
        l=0;
        //_for(i,0,M) cout<<E[i].day<<" "<<E[i].A<<" "<<E[i].B<<endl;
        _for(i,0,M+1)
        {
            if(E[i].day!=E[i+1].day)
            {
                r=i;
                process(l,r);
                l=i+1;
            }
        }
        llu sum=0;
        _for(i,0,N) sum+=(llu)ans[A[i]];
        println_llu(sum);
        E.clear();
    }
    return 0;
}  