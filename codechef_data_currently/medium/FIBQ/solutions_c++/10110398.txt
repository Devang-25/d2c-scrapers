#include<bits/stdc++.h>
#define MOD 1000000007
#define MAX 262150
using namespace std;

map<long long, long long> fib;

struct node{
	long long fib;
	long long fibm;
	long long fibp;
}num[MAX];

long long fibo(long long n)
{
	//cout<<" enter "<<n<<endl;
	if(n<=0) return 0;
	if(n<=2) return 1;
	if(fib.find(n)!=fib.end()) return fib[n];
	long long t=0;
	long long a,b;
	a=min(n/2,n-n/2);
	b=max(n/2,n-n/2);
	t=((fibo(b)*fibo(a+1))%MOD+(fibo(b-1)*fibo(a))%MOD)%MOD;
	fib.insert(pair<long long, long long>(n,0));
	fib[n]=t;
	//cout<<" "<<n<<" "<<fib[n]<<endl;
	return fib[n];
}

node find(int i, int l, int r, int start, int limit)
{
	//cout<<" enter "<<i<<" "<<l<<" "<<r<<endl;
	if(i>=start && i<=limit && (l<=i && r>=i)) return num[i];
	if(i>limit || l<i) {
		node t;
		t.fib=0;
		t.fibm=0;
		t.fibp=0;
		return t;
	}
	if(l==r && l==i) return num[i];
	if(l==2*i && r==2*i+1) return num[i];
	if(r<2*i) {
		node t;
		t.fib=0;
		t.fibm=0;
		t.fibp=0;
		return t;
	}
	//if(l>2*i) return find(2*i+1,l,r,limit);
	if(r<2*i+1) return find(2*i,l,r,start,limit);
	
	node t=find(2*i,l,r,start,limit);
	node q=find(2*i+1,l,r,start,limit);
	node res;
	res.fib=(t.fib+q.fib+t.fib*q.fibp+t.fibm*q.fib)%MOD;
	res.fibm=(t.fibm+q.fibm+t.fib*q.fib+t.fibm*q.fibm)%MOD;
	res.fibp=(t.fibp+q.fibp+t.fib*q.fib+t.fibp*q.fibp)%MOD;
	//cout<<" found "<<i<<" "<<res.fib<<endl;
	return res;
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	int n,m,l,r,x,index,start;
	long long y,t;
	cin>>n>>m;
	if(n==1) {
		start=1;
	}
	else {
		index=log2(n-1)+1;
		start=pow(2,index);
	}
	//memset(num,-1,sizeof num);
	for(int i=0; i<MAX; i++)
	{
		num[i].fib=0;
		num[i].fibm=0;
		num[i].fibp=0;
	}
	for(int i=start; i<start+n; i++)
	{
		cin>>t;
		num[i].fib=fibo(t);
		num[i].fibm=fibo(t-1);
		num[i].fibp=fibo(t+1);
		//cout<<" "<<t<<" "<<num[i].fib<<" "<<num[i].fibm<<" "<<num[i].fibp<<endl;
	}
	
	//cout<<"build start"<<endl;
	for(int i=start-1; i>0; i--)
	{
		num[i].fib=(num[2*i].fib+num[2*i+1].fib+((num[2*i].fib*num[2*i+1].fibp)%MOD+(num[2*i].fibm*num[2*i+1].fib)%MOD))%MOD;
		num[i].fibm=(num[2*i].fibm+num[2*i+1].fibm+((num[2*i].fib*num[2*i+1].fib)%MOD+(num[2*i].fibm*num[2*i+1].fibm)%MOD))%MOD;
		num[i].fibp=(num[2*i].fibp+num[2*i+1].fibp+((num[2*i].fib*num[2*i+1].fib)%MOD+(num[2*i].fibp*num[2*i+1].fibp)%MOD))%MOD;
	}
	//cout<<"build done"<<endl;
	/*cout<<" start: "<<start<<endl;
	for(int i=1; i<start+n; i++)
	{
		cout<<" "<<num[i].fib;
	}
	cout<<endl;*/
	char c;
	for(int i=0; i<m; i++)
	{
		cin>>c;
		if(c=='C') {
			cin>>x>>y;
			num[start+x-1].fib=fibo(y);
			num[start+x-1].fibm=fibo(y-1);
			num[start+x-1].fibp=fibo(y+1);
			int q=start+x-1,j=q/2;
			while(j>=1)
			{
				num[j].fib=(num[2*j].fib+num[2*j+1].fib+((num[2*j].fib*num[2*j+1].fibp)%MOD+(num[2*j].fibm*num[2*j+1].fib)%MOD))%MOD;
				num[j].fibm=(num[2*j].fibm+num[2*j+1].fibm+((num[2*j].fib*num[2*j+1].fib)%MOD+(num[2*j].fibm*num[2*j+1].fibm)%MOD))%MOD;
				num[j].fibp=(num[2*j].fibp+num[2*j+1].fibp+((num[2*j].fib*num[2*j+1].fib)%MOD+(num[2*j].fibp*num[2*j+1].fibp)%MOD))%MOD;
				j/=2;
			}
		}
		else {
			cin>>l>>r;
			node ans;
			ans=find(1,start+l-1,start+r-1,start,start+n-1);
			cout<<ans.fib<<endl;
		}
	}
	return 0;
}