#include <bits/stdc++.h>

using namespace std;

#define S(x) scanf("%d",&x)
#define Sl(x) scanf("%lld",&x)
#define P(x) printf("%d
",x)
#define Pl(x) printf("%lld
",x)
#define FOR(i,x) for(int i=0;i<x;i++)
#define PB push_back
#define MP make_pair
#define Fill(a, b) memset(a, b, sizeof(a))

#define N 1000000
#define MAX (1+(1<<21))
#define INF 1000000009
#define MOD 1000000007

typedef long long LL;
typedef pair<int, int> PII;
typedef vector<int> VI;

int n,m;
int ar[N+1];
int tree[MAX];
map<int, LL> mapp;
map<int, LL>::iterator it;
LL total;

void build_tree(int node, int a, int b) {
	if (a > b)	return;
	if (a == b) {
		tree[node] = a;
		return;
	}

	build_tree(node*2, a, (a+b)/2);
	build_tree(node*2+1, 1+(a+b)/2, b);

	if (ar[tree[node*2]] >= ar[tree[node*2+1]])
		tree[node] = tree[node*2];
	else
		tree[node] = tree[node*2+1];
}

int query_tree(int node, int a, int b, int i, int j) {
	if (a > b | a > j | b < i)	return n;
		
	if (a >=i && b <=j)	return tree[node];

	int q1 = query_tree(node*2, a, (a+b)/2, i, j);
	int q2 = query_tree(node*2+1, 1+(a+b)/2, b, i, j);
	
	if (ar[q1] >= ar[q2])	return q1;
	return q2;
}

void fill_map(int a, int b) {
	if (a > b)	return;
	int c = query_tree(1, 0, n-1, a, b);
	int val = ar[c];
	LL left = (c-a+1), right = (b-c+1);
	LL change = left * right;
	total+= change; 
	mapp[val]+= change;

	fill_map(a, c-1);
	fill_map(c+1, b);
}

void make_cumulative() {
	LL temp;
	it = mapp.end();
	it--; 
	temp = it->second;
	it--;
	while(it != mapp.begin()) {
		mapp[it->first] += temp;
		temp = mapp[it->first];
		it--;
	}
	mapp[it->first] += temp;
}

void solve() {
	S(n); S(m);
	FOR(i,n)	S(ar[i]);
	ar[n] = -INF;
	total = 0;
    
	build_tree(1, 0, n-1);
	fill_map(0, n-1);
	make_cumulative();

	char c, x;
	int k;
	LL v = 0;
	// Pl(total);
	// for(it = mapp.begin(); it!= mapp.end(); it++) {
	// 	printf("%d %lld
", it->first, it->second);
	// }
	FOR(i,m) {
		scanf(" %c %d %c", &c, &k, &x);	
		switch(c) {
			case '>':
				it = mapp.upper_bound(k);
				if (it == mapp.end())	v = 0;
				else	v = it->second;
				break;
			case '=':
				it = mapp.lower_bound(k);
				if (it == mapp.end() || it->first != k)	v = 0;
				else {
					v = it->second;
					if ((++it) != mapp.end())	v-= it->second;
				}
				break;
			case '<':
				it = mapp.lower_bound(k);
				if (it == mapp.end())	v = total;
				else	v = total - it->second;
		}
		// Pl(v);
		if (v&1) {
			printf("%c", x);
		} else {
			printf("%c", (x=='D')?'C':'D');
		}
	}
}

int main(int argc, char const *argv[])
{
	int t=1;
//	scanf("%d",&t);
	for(int i=1;i<=t;i++)
	{
		solve();
	}
}