#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<iostream>
#include<algorithm>
#include<vector>

#define SIZE 2002
#define MOD 1000000000

typedef long long int ll;

ll rows, cols;
ll a[SIZE][SIZE];
ll C[2*SIZE+10][2*SIZE+10];
ll count = 0;

ll Cof(ll n, ll k) {
  if(k > n) 
    return 0;
  if(k == 0) 
    return 1;
  if(k == n) 
    return 1;
  else 
    return C[n][k];
}

void fillC() {
  ll i, j;
  for(i=1; i<=4004; i++) {
    for(j=1; j<=i; j++) {
      if (i == j || j == 0) {
        C[i][j] = 1;
      } else {
        C[i][j] = (Cof(i-1, j) + Cof(i-1, j-1)) % MOD;
      }
    }
  }
}

ll dp(ll sum, ll lvl) {
  //printf("Sum %lld - Level %lld
", sum, lvl);
  count++;
  if (a[sum][lvl] != -1) {
    return a[sum][lvl];
  }
  ll right;
  ll up;
  if (lvl+1 > rows) {
    // don't go up
    up = 1;
    a[sum][lvl+1] = 1;
  }
  else {
    // go up
    if (a[sum][lvl+1] != -1)
      up = a[sum][lvl+1];
    else
      up = dp(sum, lvl+1);
  }
  if (sum+1 > cols) {
    // don't go right
    right = 0;
    a[sum+1][lvl] = 0;
  }
  else {
    // go right
    if (a[sum+1][lvl] != -1)
      right = a[sum+1][lvl];
    else
      right = dp(sum+1, lvl);
  }
  a[sum][lvl] = (up*Cof(sum+cols-1, cols-1) + right) % MOD;
  //printf("Sum %lld - Level %lld, Val %lld
", sum, lvl, a[sum][lvl]);
  return a[sum][lvl];
}

void initA() {
  ll i, j;
  // init
  for(i=0; i<=2002; i++) {
    for(j=0; j<=2002; j++) a[i][j] = -1;
  }
}
int main() {
  ll T;
  ll i, j, result;
  scanf("%lld", &T);
  fillC();
  while(T--) {
    initA();
    result = 0;
    scanf("%lld %lld", &rows, &cols);
    result = dp(0, 1);
    printf("%lld
", result % MOD);
    //printf("Result - %lld
", result % MOD);
    //printf("Counts: %lld
", count);
  }
};
