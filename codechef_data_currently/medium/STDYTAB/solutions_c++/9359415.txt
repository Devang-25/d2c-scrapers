#include<iostream>
#include<set>
#include<map>
#include<vector>
#include<list>
#include<string.h>
#include<cmath>
#include<algorithm>
#include<string>
#include<sstream>
#include<stack>
using namespace std;

typedef unsigned long long int ull;
typedef long long int ll;

#define pb push_back
#define mp make_pair
#define S second
#define F first
#define all(c) (c).begin(), (c).end()
#define vectorIterate(v) for(auto it=v.begin(); it!=v.end();it++)

ll gcd(ll a, ll b)
{
   if (b==0) return a;
   return gcd(b,a%b);
}

ll abs1(ll a)
{
	if(a<0)
	return -1*a;
	else return a;
}

ll fast_pow(ll base, ll n,ll M)
{
    if(n==0)
       return 1;
    if(n==1)
    return base;
    long long halfn=fast_pow(base,n/2,M);
    if(n%2==0)
        return ( halfn * halfn ) % M;
    else
        return ( ( ( halfn * halfn ) % M ) * base ) % M;
}
ll findMMI_fermat(ll n,ll M)
{
    return fast_pow(n,M-2,M);
}

pair<ll, pair<ll, ll> > extendedEuclid(ll a, ll b) {
    if(a == 0) return make_pair(b, make_pair(0, 1));
    pair<ll, pair<ll, ll> > p;
    p = extendedEuclid(b % a, a);
    return make_pair(p.first, make_pair(p.second.second - p.second.first*(b/a), p.second.first));
}
 
ll modInverse(ll a, ll m) {
    return (extendedEuclid(a,m).second.first + m) % m;
}


ll max2(ll a, ll b)
{
	if(a>b)
	return a;
	else return b;
}

ll max3(ll a, ll b, ll c)
{
	max2(max2(a, b), c);
}

ll min2(ll a, ll b)
{
	if(a<b)
	return a;
	else return b;
}

ll min3(ll a, ll b, ll c)
{
	return min2(min2(a, b), c);
}

ll mod=1000000000;

ll ncr[4001][4001], arr[2001][2001];

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	for(int i=0;i<=4000;i++)
	ncr[i][0]=1;
	for(ll i=1;i<=4000;i++)
	{
		for(int j=1;j<=i;j++)
		ncr[i][j]=(ncr[i-1][j-1]+ncr[i-1][j])%mod;
	}
//	for(ll i=1;i<=10;i++)
//	cout<<fac[i]<<" ";
//	cout<<endl;
	int t;
	cin>>t;
	while(t--)
	{
		ll n, m;
		cin>>n>>m;
		for(int i=0;i<=n;i++)
		{
			for(int j=0;j<=m;j++)
			arr[i][j]=0;
		}
		arr[0][0]=1;
		for(int i=1;i<=n;i++)
		{
			ll sum=0;
			for(int j=0;j<=m;j++)
			{
				sum=(sum+arr[i-1][j])%mod;
				arr[i][j]=((ncr[j+m-1][m-1]%mod)*(sum%mod))%mod;
			}
		}
		ll ans=0;
//		for(int i=0;i<=n;i++)
//		{
//			for(int j=0;j<=m;j++)
//			cout<<arr[i][j]<<" ";
//			cout<<endl;
//		}
		for(int i=0;i<=m;i++)
		ans=((ans%mod)+(arr[n][i]%mod))%mod;
		cout<<ans<<endl;
	}
	return 0;
}
