#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<iostream>
#include<algorithm>
#include<vector>

#define SIZE 2002
#define MOD 1000000000

typedef long long int ll;

ll rows, cols;
ll a[SIZE][SIZE];
ll C[2*SIZE+10][2*SIZE+10];

ll Cof(ll n, ll k) {
  if(k > n) 
    return 0;
  if(k == 0) 
    return 1;
  if(k == n) 
    return 1;
  else 
    return C[n][k];
}

void fillC() {
  ll i, j;
  for(i=1; i<=4004; i++) {
    for(j=1; j<=i; j++) {
      if (i == j || j == 0) {
        C[i][j] = 1;
      } else {
        C[i][j] = (Cof(i-1, j) + Cof(i-1, j-1)) % MOD;
      }
    }
  }
}

ll dp(ll sum, ll lvl) {
  //printf("%lld - %lld
", sum, lvl);
  ll i,result, below, cur;
  result = 0;
  if (a[sum][lvl] != 0) {
    //printf("Cached!
");
    return a[sum][lvl];
  }
  if (lvl == 1) {
    a[sum][lvl] = Cof(sum+cols-1, cols-1);
    return a[sum][lvl];
  }
  if (sum == 0) {
    a[sum][lvl] = 1;
    return 1;
  }
  for(i=0; i<=sum; i++) {
    below = dp(sum-i, lvl-1);
    cur = Cof(sum+cols-1, cols-1); 
    result += (below*cur) % MOD;
    result = result % MOD;
  }
  a[sum][lvl] = result;
  return a[sum][lvl];
}

void initA() {
  ll i, j;
  // init
  for(i=0; i<=2002; i++) {
    for(j=0; j<=2002; j++) a[i][j] = 0;
  }
}
int main() {
  ll T;
  ll i, j, result;
  scanf("%lld", &T);
  fillC();
  while(T--) {
    initA();
    result = 0;
    scanf("%lld %lld", &rows, &cols);
    for(i=0; i<=cols; i++) {
      result += (dp(cols-i, rows)) % MOD;
      result = result % MOD;
    }
    printf("%lld
", result);
    //printf("Result: %lld
", result);
  }
};
