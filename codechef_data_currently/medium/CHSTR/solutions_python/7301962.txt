
from sys import stdin


MOD = int(10e8 + 7)
factorial_c = [1, 1]
pairs_count = [0]
question_cache = {}
max_question = 0

def solve(question):
	if question in question_cache:
			answer = question_cache[question]
	else:
		if question > max_question:
			answer = 0
		else:
			
			combination = [0 for n in xrange(len(pairs_count))]
			for n in xrange(question, len(pairs_count) + 1):
				combination[n - 1] = int(factorial_c[n]/(factorial_c[question]*factorial_c[n - question]))
				combination[n - 1] *= pairs_count[n - 1]				

			question_cache[question] = sum(combination) % MOD
			answer = question_cache[question]

	return answer

def compute_occur(content):
	L = 0
	R = 0
	cont_len = len(content)

	z = [0 for i in xrange(cont_len)]
	z[0] = cont_len
	for i in xrange(1, cont_len):
		if i > R:
			L = R = i 
			while R < cont_len and content[R - L] == content[R]:
				R = R + 1
			z[i] = R - L
			R = R - 1
		else:
			k = i - L
			if z[k] < R - i + 1:
				z[i] = z[k]
			else:
				L = i 
				while R < cont_len and content[R - L] == content[R]:
					R = R + 1
				z[i] = R - L
				R = R - 1
	return z

def compute_pair(message):
	global pairs_count
	pairs_count = [0 for n in xrange(len(message))]

	for k in xrange(len(message)):
		substring = message[k:]

		occur = compute_occur(substring)
		occur_len = len(occur)
		for n in xrange(occur_len):
			count = sum(mapped > n for mapped in occur)	
			pairs_count[count - 1] += 1 			    

	for n in xrange(len(pairs_count) - 1):
		pairs_count[n] = pairs_count[n] - pairs_count[n + 1]

n_test = int(raw_input())

for n in xrange(n_test):
	str_input = stdin.readline().split()
	s_len = int(str_input[0])
	q_size = int(str_input[1])

	
	if len(factorial_c) <= s_len:
		curr_len = len(factorial_c)
		factorial_c.extend([1] * (s_len - curr_len + 1))
		next_factorial = factorial_c[-1]
		for n in xrange(curr_len, len(factorial_c)):
			next_factorial *= n % MOD
			factorial_c[n] = next_factorial

	
	compute_pair(stdin.readline()[:s_len])

	max_question = max([i for i in xrange(len(pairs_count)) if pairs_count[i] > 0]) + 1 	
	question_list = [int(stdin.readline()) for i in xrange(q_size)]
	question_cache = {}
	all_answer = map(solve, question_list)

	print '
'.join(map(str,all_answer))