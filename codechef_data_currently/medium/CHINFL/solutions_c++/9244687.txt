#include <bits/stdc++.h>
using namespace std;

const int MAXN = 1050;

int buy[MAXN][MAXN];
int sell[MAXN][MAXN];		

double dp[MAXN][MAXN][2] ; //dp[i][j][c1] denotes the currency of type c1 at i th second at j th kiosk
							// 0 for peppercorns and 1 for Dollars

int N, M, D;

void solve()
{
	int i , j, k;

	for(i = 0 ; i < N ; i++)
	{
		dp[0][i][0] = (double)D;
		dp[0][i][1] = 0.0;
	}


	for(i = 1 ; i <= M ; i++)		//iteration on time(i.e :: at i th sec)
	{
		for(j = 0 ; j < N ; j++)	//iteration on Kiosk
		{
			// if we skip this second as waiting on this kiosk
			dp[i][j][0] = dp[i-1][j][0];
			dp[i][j][1] = dp[i-1][j][1];

			// we do exchange at this kiosk

			

			for(k = 0 ; k < N ; k++) // k denotes the distance between two kiosks that we've travelled
			{
				if(j+k < N)	
				{
					dp[i][j][0] = max(dp[i][j][0], dp[i-k][j+k][0]);
					dp[i][j][1] = max(dp[i][j][1], dp[i-k][j+k][1]);

					dp[i][j][0] = max(dp[i][j][0], dp[i-1][j][1]*(double)buy[j][i]);
					dp[i][j][1] = max(dp[i][j][1], dp[i-1][j][0]/(double)sell[j][i]);
				}

				if(j-k >= 0)
				{
					dp[i][j][0] = max(dp[i][j][0], dp[i-k][j-k][0]);
					dp[i][j][1] = max(dp[i][j][1], dp[i-k][j-k][1]);

					dp[i][j][0] = max(dp[i][j][0], dp[i-1][j][1]*(double)buy[j][i]);
					dp[i][j][1] = max(dp[i][j][1], dp[i-1][j][0]/(double)sell[j][i]);
				}
			}
		}
	}

	double ans = 0.0;
	double mx = 1000000000000000000.0;

	for(i = 0 ; i < N ; i++)
	{
		ans = max(ans, dp[M][i][0]);
	}

	if(ans-mx >= (double)(0.000001))
		cout<<"Quintillionnaire
";
	else
		printf("%0.6lf
", ans);
}

int main()
{
	ios_base::sync_with_stdio(false);

	int i, j;

	cin>>N >>M >>D;

	for(i = 0 ; i < N ; i++)
	{
		for(j = 1 ; j <= M ; j++)
		{
			cin>>sell[i][j] >>buy[i][j];
		}
	}

	solve();

	return 0;
}