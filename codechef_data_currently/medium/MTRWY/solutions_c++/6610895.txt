#include <string>
#include <vector>
#include <algorithm>
#include <numeric>
#include <set>
#include <map>
#include <queue>
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <cstring>
#include <cctype>
#include <cassert>
#include <limits>
#include <functional>
#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))
#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))
#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))
#if defined(_MSC_VER) || __cplusplus > 199711L
#define aut(r,v) auto r = (v)
#else
#define aut(r,v) __typeof(v) r = (v)
#endif
#define each(it,o) for(aut(it, (o).begin()); it != (o).end(); ++ it)
#define all(o) (o).begin(), (o).end()
#define pb(x) push_back(x)
#define mp(x,y) make_pair((x),(y))
#define mset(m,v) memset(m,v,sizeof(m))
#define INF 0x3f3f3f3f
#define INFL 0x3f3f3f3f3f3f3f3fLL
using namespace std;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii; typedef long long ll;
template<typename T, typename U> inline void amin(T &x, U y) { if(y < x) x = y; }
template<typename T, typename U> inline void amax(T &x, U y) { if(x < y) x = y; }
 
struct UnionFind {
	vector<int> data;
	void init(int n) { data.assign(n, -1); }
	bool unionSet(int x, int y) {
		x = root(x); y = root(y);
		if(x != y) {
			if(data[y] < data[x]) swap(x, y);
			data[x] += data[y]; data[y] = x;
		}
		return x != y;
	}
	bool findSet(int x, int y) { return root(x) == root(y); }
	int root(int x) { return data[x] < 0 ? x : root(data[x]); }
	int size(int x) { return -data[root(x)]; }
};
 
int main() {
	int T;
	scanf("%d", &T);
	rep(ii, T) {
		int W, H, Q;
		scanf("%d%d%d", &W, &H, &Q);
		vector<vector<bool> > wallH(H-1, vector<bool>(W, false)), wallV(H, vector<bool>(W-1, false));
		vector<pair<int,pair<pii,pii> > > queries;
		rep(i, Q) {
			int ty;
			scanf("%d", &ty);
			if(ty == 1) {
				int x, y;
				scanf("%d%d", &x, &y), -- x, -- y;
				if(!wallH[y][x]) {
					wallH[y][x] = true;
					queries.push_back(mp(0, mp(mp(y, x), mp(y + 1, x))));
				}
			}else if(ty == 2) {
				int x, y;
				scanf("%d%d", &x, &y), -- x, -- y;
				if(!wallV[y][x]) {
					wallV[y][x] = true;
					queries.push_back(mp(0, mp(mp(y, x), mp(y, x + 1))));
				}
			}else if(ty == 3) {
				int x1, y1, x2, y2;
				scanf("%d%d%d%d", &x1, &y1, &x2, &y2), -- x1, -- y1, -- x2, -- y2;
				queries.push_back(mp(1, mp(mp(y1, x1), mp(y2, x2))));
			}else if(ty == 4) {
				queries.push_back(mp(2, mp(mp(-1, -1), mp(-1, -1))));
			}
		}
		UnionFind uf; uf.init(W * H);
		rep(y, H) rep(x, W) {
			if(y + 1 < H && !wallH[y][x])
				uf.unionSet(y * W + x, (y+1) * W + x);
			if(x + 1 < W && !wallV[y][x])
				uf.unionSet(y * W + x, y * W + (x+1));
		}
		int maxCC = 0;
		rep(y, H) rep(x, W)
			amax(maxCC, uf.size(y * W + x));
		long long anssum = 0;
		for(int qi = (int)queries.size() - 1; qi >= 0; -- qi) {
			int ty = queries[qi].first;
			pii p = queries[qi].second.first;
			pii q = queries[qi].second.second;
			if(ty == 0) {
				uf.unionSet(p.first * W + p.second, q.first * W + q.second);
				amax(maxCC, uf.size(p.first * W + p.second));
			}else if(ty == 1) {
				int ans = uf.findSet(p.first * W + p.second, q.first * W + q.second) ? 1 : 0;
				anssum += ans;
			}else if(ty == 2) {
				anssum += maxCC;
			}
		}
		printf("%lld
", anssum);
	}
	return 0;
} 