#include<bits/stdc++.h>

using namespace std;

static int a[1000007][5],vis[1007][1007],comp[1007][1007],block[1007][1007][5];
struct parent
{
    int f;
    int s;
}temppar,par[1007][1007];

struct coor
{
    int x;
    int y;
};

int c,n,m,maxcomp;

int valid(int x,int y)
{
    if(x>=1 && x<=n && y>=1 && y<=m)
        return 1;
    return 0;
}

parent findpar(int x,int y)
{
    if(par[x][y].f==x && par[x][y].s==y)
        return par[x][y];
    par[x][y]=findpar(par[x][y].f,par[x][y].s);
    return par[x][y];
}

void rem(int x1,int y1,int x2,int y2)
{
    parent l1,l2;
    l1=findpar(x1,y1);
    l2=findpar(x2,y2);
    if(l1.f==l2.f && l1.s==l2.s)
        return ;
    par[l1.f][l1.s]=l2;
    comp[l2.f][l2.s]=comp[l1.f][l1.s]+comp[l2.f][l2.s];
    maxcomp=max(maxcomp,comp[l2.f][l2.s]);
}

int check(int x1,int y1,int x2,int y2)
{
    parent l1,l2;
    l1=findpar(x1,y1);
    l2=findpar(x2,y2);
    if(l1.f==l2.f && l1.s==l2.s)
        return 1;
    else return 0;
}

/*void dfs(int x1,int y1)
{
    vis[x1][y1]=1;
    c++;
    par[x1][y1]=temppar;
    if(valid(x1,y1+1) && !block[x1][y1][1] && !vis[x1][y1+1])
        dfs(x1,y1+1);
    if(valid(x1,y1-1) && !block[x1][y1][3] && !vis[x1][y1-1])
        dfs(x1,y1-1);
    if(valid(x1+1,y1) && !block[x1][y1][2] && !vis[x1+1][y1])
        dfs(x1+1,y1);
    if(valid(x1-1,y1) && !block[x1][y1][4] && !vis[x1-1][y1])
        dfs(x1-1,y1);
}*/
int bfs(int i,int j)
{
    int sum,x1,y1;
    queue<coor> q;
    coor temp;
    temp.x=i;
    temp.y=j;
    q.push(temp);
    vis[i][j]=1;
    sum=0;
    while(!q.empty())
    {
        temp=q.front();
        x1=temp.x;
        y1=temp.y;
        if(valid(x1,y1+1) && !block[x1][y1][1] && !vis[x1][y1+1])
        {
            vis[x1][y1+1]=1;
            temp.x=x1;temp.y=y1+1;
            q.push(temp);
        }
    if(valid(x1,y1-1) && !block[x1][y1][3] && !vis[x1][y1-1])
    {
        vis[x1][y1-1]=1;
            temp.x=x1;temp.y=y1-1;
            q.push(temp);
    }
    if(valid(x1+1,y1) && !block[x1][y1][2] && !vis[x1+1][y1])
    {
        vis[x1+1][y1]=1;
            temp.x=x1+1;temp.y=y1;
            q.push(temp);
    }
    if(valid(x1-1,y1) && !block[x1][y1][4] && !vis[x1-1][y1])
    {
        vis[x1-1][y1]=1;
            temp.x=x1-1;temp.y=y1;
            q.push(temp);
    }
    par[x1][y1]=temppar;
    q.pop();
    sum++;
    }
    return sum;
}
int main()
{
    int t,q,ch,x1,y1,x2,y2,sum,i,j,ans,k;
    cin>>t;
    while(t--)
    {
        cin>>n>>m>>q;
        for(i=0;i<=n;i++)
        {
            for(j=0;j<=m;j++)
            {
                vis[i][j]=0;
                for(k=0;k<=4;k++)
                {
                    block[i][j][k]=0;
                }
            }
        }
        for(i=0;i<q;i++)
        {
            cin>>ch;
            a[i][0]=ch;
            switch(ch)
            {
            case 1:
                cin>>x1>>y1;
                block[x1][y1][1]++;
                block[x1][y1+1][3]=1;
                a[i][1]=x1;a[i][2]=y1;
                break;
            case 2:
                cin>>x1>>y1;
                block[x1][y1][2]++;
                block[x1+1][y1][4]=1;
                a[i][1]=x1;a[i][2]=y1;
                break;
            case 3:
                cin>>x1>>y1>>x2>>y2;
                a[i][1]=x1;a[i][2]=y1;a[i][3]=x2;a[i][4]=y2;
                break;
            case 4:
                break;
            default:
                break;
            }
        }
        maxcomp=-1;sum=0;
        for(i=1;i<=n;i++)
        {
            for(j=1;j<=m;j++)
            {
                if(!vis[i][j])
                {
                    temppar.f=i;temppar.s=j;
                    c=bfs(i,j);
                    comp[i][j]=c;
                    maxcomp=max(maxcomp,c);
                    //cout<<c<<"
";
                }
            }
        }
        for(i=q-1;i>=0;i--)
        {
            if(a[i][0]==1)
            {
                x1=a[i][1];y1=a[i][2];
                block[x1][y1][1]--;
                if(block[x1][y1][1]==0)
                {
                    rem(x1,y1,x1,y1+1);
                }
            }
            else if(a[i][0]==2)
            {
                x1=a[i][1];y1=a[i][2];
                block[x1][y1][2]--;
                if(block[x1][y1][2]==0)
                {
                    rem(x1,y1,x1+1,y1);
                }
            }
            else if(a[i][0]==3)
            {
                x1=a[i][1];y1=a[i][2];x2=a[i][3];y2=a[i][4];
                ans=check(x1,y1,x2,y2);
                sum+=ans;
                //cout<<ans<<"
";
            }
            else if(a[i][0]==4)
            {
            //cout<<maxcomp<<"
";
                 sum+=maxcomp;
            }
        }
        cout<<sum<<"
";
    }
    return 0;
}
