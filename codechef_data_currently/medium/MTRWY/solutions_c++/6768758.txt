#include "iostream"
#include "vector"
#include "set"
#include "bitset"
#include "utility"
#include "algorithm"

typedef std::bitset<4> WALLSET;
typedef std::pair<int, std::bitset<4> > NODE;

// Set global variables
std::vector<NODE> nodes;
std::vector< std::vector<int> > container;
int m, n;
bool is_container_dirty = false;

// Wall value - 1111 - TRBL

// Check wall exists or not
bool has_left(NODE node){ return node.second.test(0); }
bool has_right(NODE node){ return node.second.test(2); }
bool has_top(NODE node){ return node.second.test(3); }
bool has_bottom(NODE node){ return node.second.test(1); }
bool is_alone(NODE node){ return node.second.none(); }

// Remove wall
void remove_left(NODE& node){ node.second.set(0, false); }
void remove_right(NODE& node){ node.second.set(2, false); }
void remove_top(NODE& node){ node.second.set(3, false); }
void remove_bottom(NODE& node){ node.second.set(1, false); }

// Get 1D index from coordinates
int get_flattened_index(int x, int y) {return ((x - 1) * n + (y - 1)); }

// Check whether two nodes are connected
int check_connected(int index1, int index2)
{
	int connected = 0;
	std::vector<NODE> temp_nodes = nodes;
	std::vector<int> temp_v1 = std::vector<int>();
	std::vector<int> temp_v2 = std::vector<int>();

	temp_v1.push_back(index1);
	temp_v2.push_back(index2);

	for (int i = 0; !connected && i < temp_v1.size() && i < temp_v2.size(); i++)
	{
		int temp_index1 = temp_v1[i];
		int temp_index2 = temp_v2[i];

		//std::cout<<temp_index1<<' '<<temp_index2<<std::endl;

		if (temp_index2 == temp_index1)
			connected = 1;

		// Check neighbors of index1
		if (!connected && has_top(temp_nodes[temp_index1]))
		{
			if (temp_index1 - n == index2 || temp_index1 - n == temp_index2) connected = 1;
			remove_top(temp_nodes[temp_index1]);
			remove_bottom(temp_nodes[temp_index1 - n]);
			temp_v1.push_back(temp_index1 - n);
		}

		if (!connected && has_bottom(temp_nodes[temp_index1]))
		{
			if (temp_index1 + n == index2 || temp_index1 + n == temp_index2) connected = 1;
			remove_top(temp_nodes[temp_index1 + n]);
			remove_bottom(temp_nodes[temp_index1]);
			temp_v1.push_back(temp_index1 + n);
		}

		if (!connected && has_left(temp_nodes[temp_index1]))
		{
			if (temp_index1 - 1 == index2 || temp_index1 - 1 == temp_index2) connected = 1;
			remove_left(temp_nodes[temp_index1]);
			remove_right(temp_nodes[temp_index1 - 1]);
			temp_v1.push_back(temp_index1 - 1);
		}

		if (!connected && has_right(temp_nodes[temp_index1]))
		{
			if (temp_index1 + 1 == index2 || temp_index1 + 1 == temp_index2) connected = 1;
			remove_left(temp_nodes[temp_index1 + 1]);
			remove_right(temp_nodes[temp_index1]);
			temp_v1.push_back(temp_index1 + 1);
		}

		// Check neighbors of index2
		if (!connected && has_top(temp_nodes[temp_index2]))
		{
			if (temp_index2 - n == index1 || temp_index2 - n == temp_index1) connected = 1;
			remove_top(temp_nodes[temp_index2]);
			remove_bottom(temp_nodes[temp_index2 - n]);
			temp_v2.push_back(temp_index2 - n);
		}

		if (!connected && has_bottom(temp_nodes[temp_index2]))
		{
			if (temp_index2 + n == index1 || temp_index2 + n == temp_index1) connected = 1;
			remove_top(temp_nodes[temp_index2 + n]);
			remove_bottom(temp_nodes[temp_index2]);
			temp_v2.push_back(temp_index2 + n);
		}

		if (!connected && has_left(temp_nodes[temp_index2]))
		{
			if (temp_index2 - 1 == index1 || temp_index2 - 1 == temp_index1) connected = 1;
			remove_left(temp_nodes[temp_index2]);
			remove_right(temp_nodes[temp_index2 - 1]);
			temp_v2.push_back(temp_index2 - 1);
		}

		if (!connected && has_right(temp_nodes[temp_index2]))
		{
			if (temp_index2 + 1 == index1 || temp_index2 + 1 == temp_index1) connected = 1;
			remove_left(temp_nodes[temp_index2 + 1]);
			remove_right(temp_nodes[temp_index2]);
			temp_v2.push_back(temp_index2 + 1);
		}

	}
	
	if (!connected)
	{
		sort(temp_v1.begin(), temp_v1.end());
		sort(temp_v2.begin(), temp_v2.end());

		std::vector<int> intersection;
		set_intersection(temp_v1.begin(), temp_v1.end(), temp_v2.begin(), temp_v2.end(), std::back_inserter(intersection));
		if (!intersection.empty())
			connected = 1;
	}

	return connected;
}

// Find longest set length
int find_longest_set_length()
{
	int max_len_set = 0;
	int total_nodes = m * n;

	if (!is_container_dirty)
	{
		for (int i = 0; i < container.size(); i++)
		{
			if (container[i].size() > max_len_set)
			{
				max_len_set = container[i].size();
				if (max_len_set >= (total_nodes) / 2)
				{
					if ((total_nodes) % 2 == 0)
						break;

					if (max_len_set > (total_nodes) / 2)
						break;
				}
			}
		}
	}
	else
	{
		int temp_index;
		int deleted;
		for (int i = container.size() - 1; i >= 0; i--)
		{
			if (container[i].size() == 1)
				continue;
			std::set<int> temp_s = std::set<int>(container[i].begin(), container[i].end());
			
			while (!temp_s.empty())
			{
				std::vector<NODE> temp_nodes1 = nodes;
				std::vector<NODE> temp_nodes2 = nodes;

				std::vector<int> temp_v = std::vector<int>();
				temp_v.push_back(*temp_s.begin());
				
				temp_s.erase(*temp_s.begin());
				int cont_new_index = container.size();
				
				for (int j = 0; j < temp_v.size(); j++)
				{
					temp_index = temp_v[j];
					temp_nodes2[temp_index].first = cont_new_index;
	
					if (has_top(temp_nodes1[temp_index]))
					{
						remove_top(temp_nodes1[temp_index]);
						remove_bottom(temp_nodes1[temp_index - n]);
						deleted = temp_s.erase(temp_index - n);
						if (deleted)
							temp_v.push_back(temp_index - n);
					}
					if (has_bottom(temp_nodes1[temp_index]))
					{
						remove_top(temp_nodes1[temp_index + n]);
						remove_bottom(temp_nodes1[temp_index]);
						deleted = temp_s.erase(temp_index + n);
						if (deleted)
							temp_v.push_back(temp_index + n);
					}
					if (has_left(temp_nodes1[temp_index]))
					{
						remove_left(temp_nodes1[temp_index]);
						remove_right(temp_nodes1[temp_index - 1]);
						deleted = temp_s.erase(temp_index - 1);
						if (deleted)
							temp_v.push_back(temp_index - 1);
					}
					if (has_right(temp_nodes1[temp_index]))
					{
						remove_right(temp_nodes1[temp_index]);
						remove_left(temp_nodes1[temp_index + 1]);
						deleted = temp_s.erase(temp_index + 1);
						if (deleted)
							temp_v.push_back(temp_index + 1);
					}
				}
				
				if (!temp_s.empty())
				{
					container.push_back(temp_v);
					nodes = temp_nodes2;
				}
				else
					container[i] = temp_v;
			}
		}
		
		is_container_dirty = false;
		max_len_set = find_longest_set_length();
	}

	return max_len_set;
}

// Initialize container
void init_container()
{
	// Initialization start
	std::vector<int> main_v;
	int cnt = 0;
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
		{
			WALLSET wall_val;

			if (i != 0) wall_val.set(3);
			if (j != 0) wall_val.set(0);
			if (i != m - 1) wall_val.set(1);
			if (j != n - 1) wall_val.set(2);

			nodes.push_back(std::make_pair(0, wall_val));
			main_v.push_back(cnt++);
		}
	}
	container.push_back(main_v);
	main_v.clear();
	// Initialization End
	// Set container not dirty
	is_container_dirty = false;
}

// Entry point of program
int run_program(int total_queries)
{
	if (m < 2 || m > 1000 || n < 2 || n > 1000)
		return 0;

	long mult = (long) m * (long) n * (long) total_queries;
	if (mult < 1 || mult > 1000000)
		return 0;

	init_container();

	// Initialize query type and output
	int query_type;
	long output = 0;
	int x1, y1, x2, y2;
	int index1, index2;
	int connected;
	int max_len_set;

	// Iterate through each query
	while (total_queries--)
	{
		// Accept query type
		std::cin>>query_type;

		switch (query_type)
		{
			case 1:
			case 2:
				// Break wall
				std::cin>>x1>>y1;

				if (x1 < 1 || x1 > m || y1 < 1 || y1 > n)
					continue;
				if ((query_type == 1 && y1 > n - 1) || (query_type == 2 && x1 > m - 1))
					continue;

				// start here
				index1 = get_flattened_index(x1, y1);
				index2 = -1;

				if (query_type == 1 && has_right(nodes[index1]))
				{
					remove_right(nodes[index1]);
					index2 = index1 + 1;
					remove_left(nodes[index2]);
				}
				else if (query_type == 2 && has_bottom(nodes[index1]))
				{
					remove_bottom(nodes[index1]);
					index2 = index1 + n;
					remove_top(nodes[index2]);
				}

				// Wall broken, Set container dirty
				if (index2 != -1)
					is_container_dirty = true;

				break;

			case 3:
				// Check nodes connected
				std::cin>>x1>>y1>>x2>>y2;

				connected = 0;
				if (x1 < 1 || x2 < 1 || x1 > m || x2 > m)
					connected = 0;
				else if (y1 < 1 || y2 < 1 || y1 > n || y2 > n)
					connected = 0;
				else if (x1 == x2 && y1 == y2)
				{
					// Both coordinates pointing to same node
					connected = 1;
				}
				else
				{
					index1 = get_flattened_index(x1, y1);
					index2 = get_flattened_index(x2, y2);

					if (is_alone(nodes[index1]) || is_alone(nodes[index1]))
					{
						connected = 0;
					}
					else if ((nodes[index1].first == nodes[index2].first))
					{
						// Both coordinates pointing to same set
						// Hence check in depth if container is dirty
						if (!is_container_dirty)
							connected = 1;
						else
							connected = check_connected(index1, index2);
					}
				}
				//std::cout<<"Connected: "<<connected<<std::endl;
				output += connected;
				break;

			case 4:
				max_len_set = find_longest_set_length();
				//std::cout<<"Max Len: "<<max_len_set<<std::endl;
				output += max_len_set;
				break;

			//case 5:
			//	std::cout<<"Print"<<std::endl;
			//	for (int i = 0; i < container.size(); i++)
			//	{
			//		for (int j = 0; j < container[i].size(); ++j)
			//		{
			//			std::cout<<container[i][j]<<"  ";
			//		}
			//		std::cout<<std::endl;
			//	}
			//	std::cout<<std::endl;
			//	std::cout<<std::endl;
			//	break;

			default : //Optional
				output += 0;
		}
	}

	// Destroy containers
	nodes.clear();
	container.clear();

	return output;
}

// Entry point of program
int main()
{
	int t_cases;
	std::cin>>t_cases;

	if (t_cases < 1 || t_cases > 100)
		return 0;

	// Accept m, n and q
	int total_queries = 0;
	int q;

	// Iterate cases
	while(t_cases--)
	{
		std::cin>>m>>n>>q;

		total_queries += q;
		if (total_queries > 1000000)
			break;

		std::cout<<run_program(q)<<std::endl;
	}

	return 0;
}
