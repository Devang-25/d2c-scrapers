#include<bits/stdc++.h>
using namespace std;
#define maxn 1000005
#define F(i,p,n) for(i=p;i<n;i++)
#define I(i,p,q) for(i=p;i>=q;i--)
#define Ss(x) scanf("%s",x)
#define getcx getchar
inline void S(int &n)
{
    n=0; int ch = getcx(); int sign = 1;
    while(ch < '0' || ch > '9') { if(ch == '-') sign=-1; ch = getcx(); }
    while(ch >= '0' && ch <= '9') { n = (n << 3) + (n << 1) + ch - '0', ch = getcx(); }
    n = n * sign;
}
#define P(x) printf("%lld
",x)
#define Ps(x) printf("%d ",x)
#define LL long long int
#define mod 1e9+7
#define pii pair<int,int>
int dsu[maxn],sz[maxn],maxval,rnk[maxn];
int Q[maxn][5],G[maxn][4],myq[maxn];
int find_set(int x)
{
    return (x==dsu[x]?dsu[x]:dsu[x]=find_set(dsu[x]));
}
void merge_set(int x,int y)
{
    int px,py,p;
    px=find_set(x);
    py=find_set(y);
    if(px!=py)
    {
        if(rnk[px]>rnk[py])
        {
            dsu[py]=px;
            p=px;
        }
        else
        {
            dsu[px]=py;
            p=py;
        }
        if(rnk[px]==rnk[py])
            rnk[py]++;
        sz[p]=sz[px]+sz[py];
        if(sz[p]>maxval)
            maxval=sz[p];
    }
}
int main()
{
    int i,j,k,m,n,t,q,x1,x2,y2,y1,tp;
    S(t);
    while(t--)
    {
        dsu[0]=-1;
        LL ans=0;
        maxval=0;
        S(n);
        S(m);

        /*graph construction*/
        F(i,1,n+1)
        {
            F(j,1,m+1)
            {
                int x=(i-1)*m+j;
                if(x-m>0)
                    G[x][0]=x-m;
                else
                    G[x][0]=0;
                if(x+m<m*n+1)
                    G[x][1]=x+m;
                else
                    G[x][1]=0;
                if((x-1+m-1)/m==(x+m-1)/m)
                    G[x][2]=x-1;
                else
                    G[x][2]=0;
                if((x+m)/m==(x+m-1)/m)
                    G[x][3]=x+1;
                else
                    G[x][3]=0;
            }
        }




        S(q);

        /* forward queries */
        F(i,0,q)
        {
            S(tp);
            Q[i][0]=tp;
            if(tp==1)
            {
                S(x1);
                S(y1);
                Q[i][1]=x1;
                Q[i][2]=y1;
                int x,y,flag=0;
                x=(x1-1)*m+y1;
                y=x+1;
                F(j,0,4)
                {
                    if(G[x][j]==y)
                    {
                        G[x][j]=0;
                        flag=1;
                    }
                }
                F(j,0,4)
                {
                    if(G[y][j]==x)
                    {
                        G[y][j]=0;
                    }
                }
                if(!flag)
                    Q[i][0]=0;
            }
            else if(tp==2)
            {
                S(x1);
                S(y1);
                Q[i][1]=x1;
                Q[i][2]=y1;
                int x,y,flag=0;
                x=(x1-1)*m+y1;
                y=x+m;
                F(j,0,4)
                {
                    if(G[x][j]==y)
                    {
                        G[x][j]=0;
                        flag=1;
                    }
                }
                F(j,0,4)
                {
                    if(G[y][j]==x)
                    {
                        G[y][j]=0;
                    }
                }
                if(!flag)
                    Q[i][0]=0;
            }
            else if(tp==3)
            {
                S(x1);
                S(y1);
                S(x2);
                S(y2);
                Q[i][1]=x1;
                Q[i][2]=y1;
                Q[i][3]=x2;
                Q[i][4]=y2;
            }
        }


        /* bfs for components */
        for(i=m*n;i>0;i--)
        {
            if(!dsu[i])
            {
                int r=0,l=0;

                int cnt=1;
                myq[r++]=i;//_push(i);
                dsu[i]=i;
                while(r>l)
                {
                    int f=myq[l];
                    F(j,0,4)
                    {
                        if(!dsu[G[f][j]])
                        {
                            cnt++;
                            dsu[G[f][j]]=i;
                            myq[r++]=G[f][j];
                        }
                    }
                    l++;//_pop();
                }
                sz[i]=cnt;
                if(cnt>maxval)
                    maxval=cnt;
            }
        }


        /* backward queries*/
        for(i=q-1;i>=0;i--)
        {
            if(Q[i][0]==4)
            {
                ans+=maxval;

            }
            else if(Q[i][0]==3)
            {
                int x=(Q[i][1]-1)*m+Q[i][2],y=(Q[i][3]-1)*m+Q[i][4];
                if(find_set(x)==find_set(y))
                    ans++;

            }
            else if(Q[i][0]==2)
            {
                int x=(Q[i][1]-1)*m+Q[i][2],y;
                y=x+m;
                merge_set(x,y);
            }
            else if(Q[i][0]==1)
            {
                int x=(Q[i][1]-1)*m+Q[i][2],y;
                y=x+1;
                merge_set(x,y);
            }
        }

        P(ans);

        /*clearing old records*/
        F(i,0,m*n+1)
        {
            sz[i]=dsu[i]=rnk[i]=0;
        }

    }
    return 0;
}
