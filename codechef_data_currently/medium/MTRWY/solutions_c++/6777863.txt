#include <set>
#include <stdio.h>
using namespace std;

typedef long long LL;
const int N=1000100;
int qinfo[N][3];
int ver[N];
int hor[N];
int parent[N];
int rec[N];
set< pair<int,int> > s1;

int find(int i)
{
    int j;
    if(parent[i]==i)
    {
        return i;
    }
    else
    {
        j=find(parent[i]);
        parent[i]=j;
        return j;
    }
}

int main(int argc, char* argv[])
{
    int h, i, j, t, n, m, q;
    scanf("%d",&t);
    int clearsize=0;
    int type, x, y, x1, y1, x2, y2;
    for(h=0;h<t;h++)
    {
        if(h)
        {
            s1.clear();
        }
        for(i=0;i<clearsize;i++)
        {
            ver[i]=hor[i]=rec[i]=parent[i]=0;
        }
        scanf("%d %d %d",&n,&m,&q);
        for(i=0;i<q;i++)
        {
            scanf("%d", &type);
            qinfo[i][0]=type;
            if(type==1)
            {
                scanf("%d %d", &x, &y);
                hor[(x-1)*m+y-1]++;
            }
            else if(type==2)
            {
                scanf("%d %d", &x, &y);
                ver[(x-1)*m+y-1]++;
            }
            else if(type==3)
            {
                scanf("%d %d %d %d", &x1, &y1, &x2, &y2);
                x=(x1-1)*m+y1-1;
                y=(x2-1)*m+y2-1;
            }
            if(type<4)
            {
                qinfo[i][1]=x;
                qinfo[i][2]=y;
            }
        }
        for(i=0;i<n;i++)
        {
            for(j=0;j<m;j++)
            {
                int pos=i*m+j;
                bool cona=(i>0 && !ver[pos-m]);
                bool conb=(j>0 && !hor[pos-1]);
                if(cona)
                {
                    int p=find(pos-m);
                    parent[pos]=p;
                    rec[p]+=1;
                }
                else if(conb)
                {
                    int p=find(pos-1);
                    parent[pos]=p;
                    rec[p]+=1;
                }
                else
                {
                    parent[pos]=pos;
                    rec[pos]+=1;
                }
                if(cona && conb)
                {
                    int p1=find(pos-1);
                    int p2=find(pos-m);
                    if(p1!=p2)
                    {
                        int tt=rec[p1]+rec[p2];
                        if(rec[p1]<rec[p2])
                        {
                            parent[p1]=p2;
                            parent[pos]=p2;
                            rec[p2]=tt;
                            rec[p1]=0;
                        }
                        else
                        {
                            parent[p2]=p1;
                            parent[pos]=p1;
                            rec[p1]=tt;
                            rec[p2]=0;
                        }
                    }
                }
            }
        }
        for(i=0;i<n*m;i++)
        {
            if(rec[i]>0)
            {
                s1.insert(make_pair(rec[i],i));
            }
        }
        set< pair<int,int> >::iterator it;
        int p1, p2, pos;
        LL ans=0;
        for(i=q-1;i>=0;i--)
        {
            switch(qinfo[i][0])
            {
            case 1:
                x=qinfo[i][1];
                y=qinfo[i][2];
                pos=(x-1)*m+y-1;
                hor[pos]--;
                if(hor[pos]==0)
                {
                    p1=find(pos);
                    p2=find(pos+1);
                    if(p1!=p2)
                    {
                        s1.erase(make_pair(rec[p1],p1));
                        s1.erase(make_pair(rec[p2],p2));
                        if(rec[p1]<rec[p2])
                        {
                            parent[p1]=p2;
                            s1.insert(make_pair(rec[p1]+rec[p2],p2));
                            rec[p2]=rec[p1]+rec[p2];
                        }
                        else
                        {
                            parent[p2]=p1;
                            s1.insert(make_pair(rec[p1]+rec[p2],p1));
                            rec[p1]=rec[p1]+rec[p2];
                        }
                    }
                }
                break;
            case 2:
                x=qinfo[i][1];
                y=qinfo[i][2];
                pos=(x-1)*m+y-1;
                ver[pos]--;
                if(ver[pos]==0)
                {
                    p1=find(pos);
                    p2=find(pos+m);
                    if(p1!=p2)
                    {
                        s1.erase(make_pair(rec[p1],p1));
                        s1.erase(make_pair(rec[p2],p2));
                        if(rec[p1]<rec[p2])
                        {
                            parent[p1]=p2;
                            s1.insert(make_pair(rec[p1]+rec[p2],p2));
                            rec[p2]=rec[p1]+rec[p2];
                        }
                        else
                        {
                            parent[p2]=p1;
                            s1.insert(make_pair(rec[p1]+rec[p2],p1));
                            rec[p1]=rec[p1]+rec[p2];
                        }
                    }
                }
                break;
            case 3:
                p1=find(qinfo[i][1]);
                p2=find(qinfo[i][2]);
                ans+=(p1==p2);
                break;
            case 4:
                it=--s1.end();
                //printf("%d
", it->first);
                ans+=it->first;
                break;
            }
        }
        //
        clearsize=n*m;
        printf("%lld
", ans);
    }
    return 0;
}
