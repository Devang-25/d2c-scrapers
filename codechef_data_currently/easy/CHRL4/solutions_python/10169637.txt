import Queue as q

def process():
    N, K = map(int, raw_input().split())
    spl_num = list(map(int, raw_input().split()))

    min = []

    min.append(spl_num[0])
    pq = q.PriorityQueue()
    pq.put(Pair(min[0],0))

    for i in range(1,N):
        while((i - (peek(pq).index)) > K):
            pq.get()

        p = peek(pq)
        min.append(min[p.index] * spl_num[i])
        pq.put(Pair(min[i],i))

    print (min[N-1] % 1000000007)

def peek(pq):
    l = pq.get()
    pq.put(l)
    return Pair(l.min_value, l.index)


class Pair():
    def __init__(self, min_value, index):
        self.min_value  = min_value
        self.index = index

    def __cmp__(self, other):
        return cmp(self.min_value, other.min_value)

process()