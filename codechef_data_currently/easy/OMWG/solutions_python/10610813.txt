count=0


graphs=[]
def init(n,m):

 G={} #initializing the empty grapgh
 def make_link(g,node1,node2): #function to construct the graph in JSOn like format 
    if node1 not in G:
        G[node1]={}
    (G[node1])[node2]=1
    if node2 not in G:
        G[node2]={}
    (G[node2])[node1]=1
 points=[]
 
 for row in xrange(n):
    for col in xrange(m):
        points.append([row,col])
        #print row, col,"--", row, col+1,"--" , row, col-1, "--",row+1, col,"--", row-1,col 
 #print points
 connections=[]
 for row in xrange(n):
    for col in xrange(m):
        connections.append((str(points.index([row,col])),str(points.index([row, min(m-1,col+1)]))))
        connections.append((str(points.index([row,col])),str(points.index([row, max(0,col-1)]))))
        connections.append((str(points.index([row,col])),str(points.index([max(0,row-1), col]))))
        connections.append((str(points.index([row,col])),str(points.index([min(n-1,row+1), col]))))#,"--", row, col+1,"--" , row, col-1, "--",row+1, col,"--", row-1,col 
    
#connections = [('A','B'),('A','C'),('A','E'),('B','D'),('B','F'),('C','G'),('E','F')] #tuples representing the connections
 connections=set(connections)



 for x,y in connections:make_link(G,x,y) #constructing the graph using tuple representation

 graphs.append(G)

def dfs(G,node,traversed):
    global count 
    traversed[node]=True #mark the traversed node 
    #print "traversal:"+ node 
    for neighbour_nodes in G[node]: #take a neighbouring node 
               
        if neighbour_nodes in traversed: #condition to check whether the neighbour node is already visited
          if node!=neighbour_nodes:            
            #print neighbour_nodes
            count+=1
    for neighbour_nodes in G[node]: #take a neighbouring node 
               
        if neighbour_nodes not in traversed: #condition to check whether the neighbour node is already visited
            dfs(G,neighbour_nodes,traversed) #recursively traverse the neighbouring node
        
def start_traversal(G):
    traversed = {} #dictionary to mark the traversed nodes 
    for node in G.keys(): #G.keys() returns a node from the graph in its iteration
        if node not in traversed: #you start traversing from the root node only if its not visited 
            dfs(G,node,traversed); #for a connected graph this is called only once

t = input()
for nn in xrange(t):
    a = raw_input()
    n = a.split(' ')[0]
    m=a.split(' ')[1]
    init(int(m),int(n))
    
    
for stf in graphs:
 start_traversal(stf)
 print count
 count=0
 
 
